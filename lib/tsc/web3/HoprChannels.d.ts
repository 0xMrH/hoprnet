/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class HoprChannels extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): HoprChannels;
  methods: {
    TOKENS_RECIPIENT_INTERFACE_HASH(): TransactionObject<string>;

    accounts(
      arg0: string
    ): TransactionObject<{
      accountX: string;
      hashedSecret: string;
      counter: string;
      oddY: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    canImplementInterfaceForAddress(
      interfaceHash: string | number[],
      account: string
    ): TransactionObject<string>;

    channels(
      arg0: string | number[]
    ): TransactionObject<{
      deposit: string;
      partyABalance: string;
      closureTime: string;
      stateCounter: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    secsClosure(): TransactionObject<string>;

    token(): TransactionObject<string>;

    setHashedSecret(hashedSecret: string | number[]): TransactionObject<void>;

    init(
      senderX: number | string,
      senderY: number | string,
      hashedSecret: string | number[]
    ): TransactionObject<void>;

    fundChannelWithSig(
      additionalDeposit: number | string,
      partyAAmount: number | string,
      notAfter: number | string,
      stateCounter: number | string,
      r: string | number[],
      s: string | number[],
      v: number | string
    ): TransactionObject<void>;

    openChannel(counterparty: string): TransactionObject<void>;

    redeemTicket(
      preImage: string | number[],
      channelId: string | number[],
      hashedSecretASecretB: string | number[],
      amount: number | string,
      winProb: string | number[],
      r: string | number[],
      s: string | number[],
      v: number | string
    ): TransactionObject<string>;

    initiateChannelClosure(counterparty: string): TransactionObject<void>;

    claimChannelClosure(counterparty: string): TransactionObject<void>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: number | string,
      userData: string | number[],
      operatorData: string | number[]
    ): TransactionObject<void>;
  };
  events: {
    SecretHashSet: ContractEvent<{
      account: string;
      secretHash: string;
      counter: string;
      0: string;
      1: string;
      2: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
