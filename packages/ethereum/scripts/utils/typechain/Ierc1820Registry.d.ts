/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface Ierc1820RegistryContract
  extends Truffle.Contract<Ierc1820RegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Ierc1820RegistryInstance>;
}

export interface InterfaceImplementerSet {
  name: "InterfaceImplementerSet";
  args: {
    account: string;
    interfaceHash: string;
    implementer: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface ManagerChanged {
  name: "ManagerChanged";
  args: {
    account: string;
    newManager: string;
    0: string;
    1: string;
  };
}

type AllEvents = InterfaceImplementerSet | ManagerChanged;

export interface Ierc1820RegistryInstance extends Truffle.ContractInstance {
  getInterfaceImplementer(
    account: string,
    interfaceHash: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getManager(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  implementsERC165Interface(
    account: string,
    interfaceId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  implementsERC165InterfaceNoCache(
    account: string,
    interfaceId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  interfaceHash(
    interfaceName: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setInterfaceImplementer: {
    (
      account: string,
      interfaceHash: string,
      implementer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      interfaceHash: string,
      implementer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      interfaceHash: string,
      implementer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      interfaceHash: string,
      implementer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setManager: {
    (
      account: string,
      newManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      newManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      newManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      newManager: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateERC165Cache: {
    (
      account: string,
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    getInterfaceImplementer(
      account: string,
      interfaceHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getManager(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    implementsERC165Interface(
      account: string,
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    implementsERC165InterfaceNoCache(
      account: string,
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    interfaceHash(
      interfaceName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    setInterfaceImplementer: {
      (
        account: string,
        interfaceHash: string,
        implementer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        interfaceHash: string,
        implementer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        interfaceHash: string,
        implementer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        interfaceHash: string,
        implementer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setManager: {
      (
        account: string,
        newManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        newManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        newManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        newManager: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateERC165Cache: {
      (
        account: string,
        interfaceId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        interfaceId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        interfaceId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        interfaceId: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
