/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface HoprChannelsContract
  extends Truffle.Contract<HoprChannelsInstance> {
  "new"(
    _token: string,
    _secsClosure: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<HoprChannelsInstance>;
}

export interface SecretHashSet {
  name: "SecretHashSet";
  args: {
    account: string;
    secretHash: string;
    counter: BN;
    0: string;
    1: string;
    2: BN;
  };
}

type AllEvents = SecretHashSet;

export interface HoprChannelsInstance extends Truffle.ContractInstance {
  TOKENS_RECIPIENT_INTERFACE_HASH(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  accounts(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, string, BN, BN]>;

  canImplementInterfaceForAddress(
    interfaceHash: string,
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  channels(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN]>;

  claimChannelClosure: {
    (counterparty: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      counterparty: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      counterparty: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      counterparty: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fundChannelWithSig: {
    (
      additionalDeposit: number | BN | string,
      partyAAmount: number | BN | string,
      notAfter: number | BN | string,
      stateCounter: number | BN | string,
      r: string,
      s: string,
      v: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      additionalDeposit: number | BN | string,
      partyAAmount: number | BN | string,
      notAfter: number | BN | string,
      stateCounter: number | BN | string,
      r: string,
      s: string,
      v: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      additionalDeposit: number | BN | string,
      partyAAmount: number | BN | string,
      notAfter: number | BN | string,
      stateCounter: number | BN | string,
      r: string,
      s: string,
      v: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      additionalDeposit: number | BN | string,
      partyAAmount: number | BN | string,
      notAfter: number | BN | string,
      stateCounter: number | BN | string,
      r: string,
      s: string,
      v: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  init: {
    (
      senderX: number | BN | string,
      senderY: number | BN | string,
      hashedSecret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      senderX: number | BN | string,
      senderY: number | BN | string,
      hashedSecret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      senderX: number | BN | string,
      senderY: number | BN | string,
      hashedSecret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      senderX: number | BN | string,
      senderY: number | BN | string,
      hashedSecret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initiateChannelClosure: {
    (counterparty: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      counterparty: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      counterparty: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      counterparty: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  openChannel: {
    (counterparty: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      counterparty: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      counterparty: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      counterparty: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemTicket: {
    (
      preImage: string,
      hashedSecretASecretB: string,
      amount: number | BN | string,
      winProb: string,
      r: string,
      s: string,
      v: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      preImage: string,
      hashedSecretASecretB: string,
      amount: number | BN | string,
      winProb: string,
      r: string,
      s: string,
      v: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      preImage: string,
      hashedSecretASecretB: string,
      amount: number | BN | string,
      winProb: string,
      r: string,
      s: string,
      v: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      preImage: string,
      hashedSecretASecretB: string,
      amount: number | BN | string,
      winProb: string,
      r: string,
      s: string,
      v: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  redeemedTickets(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  secsClosure(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  setHashedSecret: {
    (hashedSecret: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      hashedSecret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      hashedSecret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hashedSecret: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  tokensReceived: {
    (
      operator: string,
      from: string,
      to: string,
      amount: number | BN | string,
      userData: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      operator: string,
      from: string,
      to: string,
      amount: number | BN | string,
      userData: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string,
      from: string,
      to: string,
      amount: number | BN | string,
      userData: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string,
      from: string,
      to: string,
      amount: number | BN | string,
      userData: string,
      operatorData: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    TOKENS_RECIPIENT_INTERFACE_HASH(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    accounts(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, string, BN, BN]>;

    canImplementInterfaceForAddress(
      interfaceHash: string,
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    channels(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN, BN, BN]>;

    claimChannelClosure: {
      (counterparty: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        counterparty: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        counterparty: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        counterparty: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fundChannelWithSig: {
      (
        additionalDeposit: number | BN | string,
        partyAAmount: number | BN | string,
        notAfter: number | BN | string,
        stateCounter: number | BN | string,
        r: string,
        s: string,
        v: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        additionalDeposit: number | BN | string,
        partyAAmount: number | BN | string,
        notAfter: number | BN | string,
        stateCounter: number | BN | string,
        r: string,
        s: string,
        v: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        additionalDeposit: number | BN | string,
        partyAAmount: number | BN | string,
        notAfter: number | BN | string,
        stateCounter: number | BN | string,
        r: string,
        s: string,
        v: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        additionalDeposit: number | BN | string,
        partyAAmount: number | BN | string,
        notAfter: number | BN | string,
        stateCounter: number | BN | string,
        r: string,
        s: string,
        v: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    init: {
      (
        senderX: number | BN | string,
        senderY: number | BN | string,
        hashedSecret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        senderX: number | BN | string,
        senderY: number | BN | string,
        hashedSecret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        senderX: number | BN | string,
        senderY: number | BN | string,
        hashedSecret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        senderX: number | BN | string,
        senderY: number | BN | string,
        hashedSecret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    initiateChannelClosure: {
      (counterparty: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        counterparty: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        counterparty: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        counterparty: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    openChannel: {
      (counterparty: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        counterparty: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        counterparty: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        counterparty: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redeemTicket: {
      (
        preImage: string,
        hashedSecretASecretB: string,
        amount: number | BN | string,
        winProb: string,
        r: string,
        s: string,
        v: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        preImage: string,
        hashedSecretASecretB: string,
        amount: number | BN | string,
        winProb: string,
        r: string,
        s: string,
        v: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        preImage: string,
        hashedSecretASecretB: string,
        amount: number | BN | string,
        winProb: string,
        r: string,
        s: string,
        v: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        preImage: string,
        hashedSecretASecretB: string,
        amount: number | BN | string,
        winProb: string,
        r: string,
        s: string,
        v: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    redeemedTickets(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    secsClosure(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    setHashedSecret: {
      (hashedSecret: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        hashedSecret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        hashedSecret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        hashedSecret: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    token(txDetails?: Truffle.TransactionDetails): Promise<string>;

    tokensReceived: {
      (
        operator: string,
        from: string,
        to: string,
        amount: number | BN | string,
        userData: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        operator: string,
        from: string,
        to: string,
        amount: number | BN | string,
        userData: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        operator: string,
        from: string,
        to: string,
        amount: number | BN | string,
        userData: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        operator: string,
        from: string,
        to: string,
        amount: number | BN | string,
        userData: string,
        operatorData: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
