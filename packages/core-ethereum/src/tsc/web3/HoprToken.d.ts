/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class HoprToken extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): HoprToken;
  methods: {
    DEFAULT_ADMIN_ROLE(): TransactionObject<string>;

    MINTER_ROLE(): TransactionObject<string>;

    accountSnapshots(
      arg0: string,
      arg1: number | string
    ): TransactionObject<{
      fromBlock: string;
      value: string;
      0: string;
      1: string;
    }>;

    allowance(holder: string, spender: string): TransactionObject<string>;

    approve(
      spender: string,
      value: number | string
    ): TransactionObject<boolean>;

    authorizeOperator(operator: string): TransactionObject<void>;

    balanceOf(tokenHolder: string): TransactionObject<string>;

    balanceOfAt(
      _owner: string,
      _blockNumber: number | string
    ): TransactionObject<string>;

    burn(
      amount: number | string,
      data: string | number[]
    ): TransactionObject<void>;

    decimals(): TransactionObject<string>;

    defaultOperators(): TransactionObject<string[]>;

    getRoleAdmin(role: string | number[]): TransactionObject<string>;

    getRoleMember(
      role: string | number[],
      index: number | string
    ): TransactionObject<string>;

    getRoleMemberCount(role: string | number[]): TransactionObject<string>;

    grantRole(
      role: string | number[],
      account: string
    ): TransactionObject<void>;

    granularity(): TransactionObject<string>;

    hasRole(
      role: string | number[],
      account: string
    ): TransactionObject<boolean>;

    isOperatorFor(
      operator: string,
      tokenHolder: string
    ): TransactionObject<boolean>;

    mint(
      account: string,
      amount: number | string,
      userData: string | number[],
      operatorData: string | number[]
    ): TransactionObject<void>;

    name(): TransactionObject<string>;

    operatorBurn(
      account: string,
      amount: number | string,
      data: string | number[],
      operatorData: string | number[]
    ): TransactionObject<void>;

    operatorSend(
      sender: string,
      recipient: string,
      amount: number | string,
      data: string | number[],
      operatorData: string | number[]
    ): TransactionObject<void>;

    renounceRole(
      role: string | number[],
      account: string
    ): TransactionObject<void>;

    revokeOperator(operator: string): TransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): TransactionObject<void>;

    send(
      recipient: string,
      amount: number | string,
      data: string | number[]
    ): TransactionObject<void>;

    symbol(): TransactionObject<string>;

    totalSupply(): TransactionObject<string>;

    totalSupplyAt(_blockNumber: number | string): TransactionObject<string>;

    totalSupplySnapshots(
      arg0: number | string
    ): TransactionObject<{
      fromBlock: string;
      value: string;
      0: string;
      1: string;
    }>;

    transfer(
      recipient: string,
      amount: number | string
    ): TransactionObject<boolean>;

    transferFrom(
      holder: string,
      recipient: string,
      amount: number | string
    ): TransactionObject<boolean>;
  };
  events: {
    Approval: ContractEvent<{
      owner: string;
      spender: string;
      value: string;
      0: string;
      1: string;
      2: string;
    }>;
    AuthorizedOperator: ContractEvent<{
      operator: string;
      tokenHolder: string;
      0: string;
      1: string;
    }>;
    Burned: ContractEvent<{
      operator: string;
      from: string;
      amount: string;
      data: string;
      operatorData: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;
    Minted: ContractEvent<{
      operator: string;
      to: string;
      amount: string;
      data: string;
      operatorData: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
    }>;
    RevokedOperator: ContractEvent<{
      operator: string;
      tokenHolder: string;
      0: string;
      1: string;
    }>;
    RoleGranted: ContractEvent<{
      role: string;
      account: string;
      sender: string;
      0: string;
      1: string;
      2: string;
    }>;
    RoleRevoked: ContractEvent<{
      role: string;
      account: string;
      sender: string;
      0: string;
      1: string;
      2: string;
    }>;
    Sent: ContractEvent<{
      operator: string;
      from: string;
      to: string;
      amount: string;
      data: string;
      operatorData: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
    }>;
    Transfer: ContractEvent<{
      from: string;
      to: string;
      value: string;
      0: string;
      1: string;
      2: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
