name: Integration Task - build everything together and test, publish?
on:
  push:
    branches: "*"
  pull_request:
    types: [closed]

jobs:
  build:
    name: Build, Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12]
        yarn-version: [1]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org/
      - name: Install node modules
        run: |
          yarn policies set-version ${{ matrix.yarn-version }}
          yarn install --frozen-lockfile
      - name: Install dependencies and link locally
        run: |
          node_modules/.bin/lerna bootstrap --ignore-prepublish --force-local -- --frozen-lockfile
      - name: Build
        run: |
          node_modules/.bin/lerna run build
      - name: Test
        run: |
          node_modules/.bin/lerna run test --stream

      - name: Publish prerelease version
        if: |
          github.event_name == 'pull_request' &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true &&
          !contains(github.event.pull_request.labels.*.name, 'Major Version') &&
          !contains(github.event.pull_request.labels.*.name, 'Minor Version') &&
          !contains(github.event.pull_request.labels.*.name, 'Patch Version')
        run: | # TODO: Assert master branch,
          git config --global user.email "noreply@hoprnet.org" && git config --global user.name "HOPR Versioning robot"
          node_modules/.bin/lerna version prerelease --preid "alpha" --yes
          git push origin master
          node_modules/.bin/lerna publish from-package --yes
          #(PACKAGE_VERSION=$(node -p -e "require('./package.json').version"); git tag $PACKAGE_VERSION && git push origin $PACKAGE_VERSION)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish major version
        if: |
          github.event_name == 'pull_request' &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true &&
          contains(github.event.pull_request.labels.*.name, 'Major Version') &&
          !contains(github.event.pull_request.labels.*.name, 'Minor Version') &&
          !contains(github.event.pull_request.labels.*.name, 'Patch Version')
        run: | # TODO: Assert master branch,
          git config --global user.email "noreply@hoprnet.org" && git config --global user.name "HOPR Versioning robot"
          node_modules/.bin/lerna version major --yes
          git push origin master
          node_modules/.bin/lerna publish from-package --yes
          #(PACKAGE_VERSION=$(node -p -e "require('./package.json').version"); git tag $PACKAGE_VERSION && git push origin $PACKAGE_VERSION)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish minor version
        if: |
          github.event_name == 'pull_request' &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true &&
          !contains(github.event.pull_request.labels.*.name, 'Major Version') &&
          contains(github.event.pull_request.labels.*.name, 'Minor Version') &&
          !contains(github.event.pull_request.labels.*.name, 'Patch Version')
        run: | # TODO: Assert master branch,
          git config --global user.email "noreply@hoprnet.org" && git config --global user.name "HOPR Versioning robot"
          node_modules/.bin/lerna version minor --yes
          git push origin master
          node_modules/.bin/lerna publish from-package --yes
          #(PACKAGE_VERSION=$(node -p -e "require('./package.json').version"); git tag $PACKAGE_VERSION && git push origin $PACKAGE_VERSION)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish patch version
        if: |
          github.event_name == 'pull_request' &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true &&
          !contains(github.event.pull_request.labels.*.name, 'Major Version') &&
          !contains(github.event.pull_request.labels.*.name, 'Minor Version') &&
          contains(github.event.pull_request.labels.*.name, 'Patch Version')
        run: | # TODO: Assert master branch,
          git config --global user.email "noreply@hoprnet.org" && git config --global user.name "HOPR Versioning robot"
          node_modules/.bin/lerna version patch --yes
          git push origin master
          node_modules/.bin/lerna publish from-package --yes
          #(PACKAGE_VERSION=$(node -p -e "require('./package.json').version"); git tag $PACKAGE_VERSION && git push origin $PACKAGE_VERSION)
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - uses: actions/setup-node@v1
        if: |
          github.event_name == 'pull_request' &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true
        with:
          node-version: '12.9.1'
          registry-url: 'https://npm.pkg.github.com'
      - name: Publish to GPR
        if: |
          github.event_name == 'pull_request' &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true 
        run: npm config set //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }} && npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Avado
        if: |
          github.event_name == 'pull_request' &&
          github.event.action == 'closed' &&
          github.event.pull_request.merged == true
        working-directory: packages/avado
        run: |
          docker-compose build
          sudo npm install -g @dappnode/dappnodesdk@0.2.9-beta.0
          dappnodesdk increase minor
          sudo dappnodesdk build --provider http://23.254.227.151:5001 

          git add dappnode_package.json docker-compose.yml releases.json
          git commit -m "Avado CI: new release"
          git push origin master

