name: HOPR Deploy
on:
  push:
    branches: ['master', 'release/*']
    paths-ignore:
      - 'docs/**'

jobs:
  build:
    name: Build, Publish etc
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org/
      - uses: actions/cache@v2
        with:
          path: 'node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies 
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          yarn
          node_modules/.bin/lerna bootstrap

      - name: Lint & Fix
        run: |
          git config --global user.email "noreply@hoprnet.org"
          git config --global user.name "HOPR Linting robot"
          yarn lint:fix
          git commit -a -m "Fix linting" || true
          git push origin ${{ github.ref }}

      - name: Link & Build
        run: |
          yarn util:link && yarn build

      - name: Publish prerelease version (On pushes to master)
        if: github.ref == 'refs/heads/master'
        run: |
          git config --global user.email "noreply@hoprnet.org"
          git config --global user.name "HOPR Versioning robot"
          git config pull.rebase false
          git pull origin master
          node_modules/.bin/lerna version preminor --yes --exact --no-push --no-changelog
          git push origin master
          node_modules/.bin/lerna publish from-package --yes
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish patch version (On pushes to release branches)
        if: |
          startsWith(github.ref, 'refs/heads/release/')
        run: |
          git config --global user.email "noreply@hoprnet.org"
          git config --global user.name "HOPR Versioning robot"
          git config pull.rebase false
          git pull origin ${{ github.ref }}
          node_modules/.bin/lerna version patch --yes --exact --no-push --no-changelog 
          git push origin ${{ github.ref }} 
          node_modules/.bin/lerna publish from-package --yes
        env:
          NODE_AUTH_TOKEN:
            ${{ secrets.NPM_TOKEN }}

      - name: Wait for NPM, and regenerate lockfiles
        run: |
          sleep 5m # Allow NPM registry to catch uo
          yarn util:regenerate
          git add packages/*/yarn.lock || true
          git commit -m "Regenerate lockfiles" || true
          git pull origin ${{ github.ref }}
          git push origin ${{ github.ref }} 


            #- name: Push a tag
            #if: |
            #github.event_name == 'pull_request' &&
            #github.event.action == 'closed' &&
            #github.event.pull_request.merged == true
            #run: |
            #(PACKAGE_VERSION=$(node -p -e "require('./package.json').version"); git tag v$PACKAGE_VERSION && git push origin v$PACKAGE_VERSION)
            #- name: Publish to GPR
            # if: |
            #github.event_name == 'pull_request' &&
            #github.event.action == 'closed' &&
            #github.event.pull_request.merged == true
            #run: |
            #echo //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }} > .npmrc
            #node_modules/.bin/lerna publish from-package --yes --registry https://npm.pkg.github.com/
            #env:
            #NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  avado:
    name: Build Avado (master or release pushes)
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - name: Get version from package.json
        run: echo ::set-env name=RELEASE::$(node -p -e "require('./packages/hoprd/package.json').version")
      - name: Build Avado
        working-directory: packages/avado
        run: |
          git config --global user.email "noreply@hoprnet.org"
          git config --global user.name "HOPR Versioning robot"
          git config pull.rebase false
          git pull origin ${{ github.ref }}
          docker-compose build
          sudo npm install -g @dappnode/dappnodesdk@0.2.9-beta.0
          dappnodesdk increase minor
          sed -i 's/version"[ ]*:[ ]*"[0-9]*\.[0-9]*\.[0-9]*"/version": "${{ env.RELEASE }}"/' ./dappnode_package.json
          sudo dappnodesdk build --provider http://23.254.227.151:5001
          git add dappnode_package.json docker-compose.yml releases.json
          git commit -m "Avado CI: new release"
          git pull origin ${{ github.ref }}
          git push origin ${{ github.ref }}

  # chat
  build_chat_docker:
    name: Build HOPR Chat Docker (master or release pushes)
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Google Cloud Credentials
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}
          export_default_credentials: true
      - name: Get version from package.json
        run: echo ::set-env name=RELEASE::$(node -p -e "require('./packages/hoprd/package.json').version")
      - name: Set Project for Google Cloud HOPR Association
        working-directory: packages/chat
        run: gcloud config set project ${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}
      - name: Building Docker image using Google Cloud Build
        working-directory: packages/chat
        run: gcloud builds submit --tag gcr.io/hoprassociation/hopr-chat:${{ env.RELEASE }}

   # chatbot
  build_chatbot_docker:
    name: Build HOPR Chatbot Docker
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
      with:
        ref: master
    - name: Setup Google Cloud Credentials
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}
        export_default_credentials: true
    - name: Get version from package.json
      run: echo ::set-env name=RELEASE::$(node -p -e "require('./packages/hoprd/package.json').version")
    - name: Set Project for Google Cloud HOPR Association
      working-directory: packages/chatbot
      run: gcloud config set project ${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}
    - name: Building Docker image using Google Cloud Build
      working-directory: packages/chatbot
      run: gcloud builds submit --tag gcr.io/hoprassociation/hopr-chatbot:${{ env.RELEASE }}

  build_hoprd_docker:
    name: Build HOPRD Docker
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Google Cloud Credentials
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}
          export_default_credentials: true
      - name: Get version from package.json
        run: echo ::set-env name=RELEASE::$(node -p -e "require('./packages/hoprd/package.json').version")
      - name: Set Project for Google Cloud HOPR Association
        working-directory: packages/hoprd
        run: gcloud config set project ${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}
      - name: Building Docker image using Google Cloud Build
        working-directory: packages/hoprd
        run:
          gcloud builds submit --tag gcr.io/hoprassociation/hoprd:${{ env.RELEASE }}
