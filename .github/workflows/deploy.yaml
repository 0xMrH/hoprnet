name: HOPR Deploy
on:
  push:
    branches: ['master', 'release/**', 'avado']
    paths-ignore:
      - 'docs/**'

jobs:
  #    build:
  #    name: Build, Publish etc
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - name: Use Node.js
  #        uses: actions/setup-node@v1
  #        with:
  #          node-version: 12
  #          registry-url: https://registry.npmjs.org/
  #      - uses: actions/cache@v2
  #        id: cache
  #        with:
  #          path: 'node_modules'
  #          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
  #
  #      - name: Install dependencies 
  #        run: |
  #          yarn
  #          node_modules/.bin/lerna bootstrap
  #          yarn autoclean --force
  #
  #      - name: Link & Build
  #        run: |
  #          yarn util:link && yarn build
  #
  #      - name: Get version from package.json
  #        run: echo "PREVIOUS_RELEASE=$(node -p -e "require('./packages/hoprd/package.json').version")" >> $GITHUB_ENV
  #
  #      # Goal is, every push to master increments c from a.b.0-prerelease-c to
  #      # a.b.0-prerelease-(c+1)
  #      # Of course this begs the question, how do we ever increment b?
  #      # If there is a released branch with a.b.c, then we know we also have to
  #      # increment b.
  #      - name: Is there a published version of this?
  #        if: github.ref == 'refs/heads/master'
  #        run: |
  #          PREVIOUS_RELEASE_MAJ_MIN=$(echo ${{ env.PREVIOUS_RELEASE }} | sed 's/\(\.[0-9]*\-alpha\)*\.[0-9]*$//')
  #          FIND_NPM=$(npm view @hoprnet/hopr-core@$PREVIOUS_RELEASE_MAJ_MIN --json)
  #          # preminor Goes a.b.0-next.0 to a.(b+1).0-next.0
  #          # prerelease Goes a.b.0-next.c to a.b.0-next.(c+1)
  #          VERSION_TYPE=$([ ${#FIND_NPM} -ge 1 ] && echo "preminor" || echo "prerelease")
  #          echo "VERSION_TYPE=${VERSION_TYPE}" >> $GITHUB_ENV
  #          echo "RELEASE TYPE: ${VERSION_TYPE} (${PREVIOUS_RELEASE_MAJ_MIN})"
  #      - name: Publish prerelease version (On pushes to master)
  #        if: github.ref == 'refs/heads/master'
  #        run: |
  #          git config --global user.email "noreply@hoprnet.org"
  #          git config --global user.name "HOPR Versioning robot"
  #          git config pull.rebase false
  #          git pull origin master
  #          node_modules/.bin/lerna version ${{ env.VERSION_TYPE }} --yes --exact --no-push --no-changelog --preid next 
  #          git push origin master
  #          node_modules/.bin/lerna publish from-package --yes
  #        env:
  #          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #
  #      # Pushing a PR to a release branch should increment the patch version in
  #      # accordance with semver.
  #      - name: Publish patch version (On pushes to release branches)
  #        if: |
  #          startsWith(github.ref, 'refs/heads/release/')
  #        run: |
  #          git config --global user.email "noreply@hoprnet.org"
  #          git config --global user.name "HOPR Versioning robot"
  #          git config pull.rebase false
  #          git pull origin ${{ github.ref }}
  #          node_modules/.bin/lerna version patch --yes --exact --no-push --no-changelog 
  #          git push origin ${{ github.ref }} 
  #          node_modules/.bin/lerna publish from-package --yes
  #        env:
  #          NODE_AUTH_TOKEN:
  #            ${{ secrets.NPM_TOKEN }}
  #
  #      - name: Get version from package.json
  #        run: echo "RELEASE=$(node -p -e "require('./packages/hoprd/package.json').version")" >> $GITHUB_ENV 
  #
  #      - name: Debug release number
  #        run: echo ${{ env.RELEASE }}
  #
  #      - name: Wait for NPM
  #        run: |
  #          sleep 5m # Allow NPM registry to catch uo
  #
  #          #      - name: Publish to GPR
  #          #        if: |
  #          #          startsWith(github.ref, 'refs/heads/release/')
  #          #        run: |
  #          #          echo //npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }} > .npmrc
  #          #          node_modules/.bin/lerna publish from-package --yes --registry https://npm.pkg.github.com/
  #          #        env:
  #          #          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #          #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #
  #  release:
  #    name: Create Github Release
  #    runs-on: ubuntu-latest
  #    needs: [build]
  #    if: startsWith(github.ref, 'refs/heads/release/')
  #    steps:
  #      - uses: actions/checkout@v2
  #      - name: Update repo from latest pushes.
  #        run: |
  #          git config --global user.email "noreply@hoprnet.org"
  #          git config --global user.name "HOPR Versioning robot"
  #          git config pull.rebase false
  #          git pull origin ${{ github.ref }} # This should pull new packages with versions etc.
  #      - name: Get version from package.json
  #        run: echo "RELEASE_NAME=v$(node -p -e "require('./packages/hoprd/package.json').version")" >> $GITHUB_ENV 
  #      - uses: softprops/action-gh-release@v1
  #        env:
  #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #        with:
  #          tag_name: ${{ env.RELEASE_NAME }}
  #          name: HOPR - ${{ env.RELEASE_NAME }}
  #          draft: false
  #          prerelease: false


  build_hoprd_docker:
    name: Build HOPRD Docker
    runs-on: ubuntu-latest
      #needs: [build]
    steps:
      - uses: actions/checkout@v2
      - name: Update repo from latest pushes.
        run: |
          git config --global user.email "noreply@hoprnet.org"
          git config --global user.name "HOPR Versioning robot"
          git config pull.rebase false
          git pull origin ${{ github.ref }} # This should pull new packages with versions etc.
      - name: Setup Google Cloud Credentials
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}
          export_default_credentials: true
      - name: Get version from package.json
        run: echo "RELEASE=$(node -p -e "require('./packages/hoprd/package.json').version")" >> $GITHUB_ENV 
      - name: Set Project for Google Cloud HOPR Association
        working-directory: packages/hoprd
        run: gcloud config set project ${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}
      - name: Building Docker image using Google Cloud Build
        working-directory: packages/hoprd
        run:
          gcloud builds submit --tag gcr.io/hoprassociation/hoprd:${{ env.RELEASE }}

  avado:
    name: Build Avado (master or release pushes)
    runs-on: ubuntu-latest
    needs: [build_hoprd_docker]
    steps:
      - uses: actions/checkout@v2
      - name: Update repo from latest pushes.
        run: |
          git config --global user.email "noreply@hoprnet.org"
          git config --global user.name "HOPR Versioning robot"
          git config pull.rebase false
          git pull origin ${{ github.ref }} # This should pull new packages with versions etc.

      - name: Get version from package.json
        run: |
          echo "RELEASE=$(node -p -e "require('./packages/hoprd/package.json').version")" >> $GITHUB_ENV 

      - name: Avado hack version if we are in master (they don't support prerelease versions)
        if: github.ref == 'refs/heads/master'
        run: |
          echo "RELEASE=0.100.0" >> $GITHUB_ENV # Set this to an arbitrary number less than 1 

      - name: Build Avado
        working-directory: packages/avado
        run: |
          docker-compose build
          sudo npm install -g git+https://github.com/AvadoDServer/AVADOSDK.git#c11c4bd
          avadosdk increase minor
          sed -i 's/version"[ ]*:[ ]*"[0-9]*\.[0-9]*\.[0-9]*"/version": "${{ env.RELEASE }}"/' ./dappnode_package.json
          cat ./dappnode_package.json | grep 'version'
          sudo avadosdk build --provider http://80.208.229.228:5001
          git add dappnode_package.json docker-compose.yml releases.json
          git commit -m "Avado CI: new release"
          git pull origin ${{ github.ref }}
          git push origin ${{ github.ref }}

          # http://go.ava.do/install/<IPFS HASH>

  deploy_instances:
    name: 'Continuous Deployment: Deploy instances'
    runs-on: ubuntu-latest
    needs: [build_hoprd_docker]
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12
        uses: actions/setup-node@v1
        with:
          node-version: 12
          registry-url: https://registry.npmjs.org/

      - name: Install ethers
        run: npm install -g @ethersproject/cli

      - name: Get version from package.json
        run: echo "RELEASE_VERSION=$(node -p -e "require('./packages/hoprd/package.json').version")" >> $GITHUB_ENV

      - name: Setup Google Cloud Credentials
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.GOOGLE_HOPRASSOCIATION_CREDENTIALS_REGISTRY }}
          export_default_credentials: true

      - name: Set Project for Google Cloud HOPR Association
        run: gcloud config set project ${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}

      - name: Update our environment with the RELEASE_ variables (NAME, IP)
        run: GITHUB_REF=${{ github.ref }} bash scripts/cd/release_env.sh >> $GITHUB_ENV
          
      - name: Update our environment with the GCLOUD_ variables (UPDATE_CONTAINER, CREATE_CONTAINER)
        run: RELEASE_NAME=${{ env.RELEASE_NAME }} bash scripts/cd/gcloud_env.sh >> $GITHUB_ENV
        
      - name: Verify environment variables
        run: |
          echo "Release Version: ${{ env.RELEASE_VERSION }}" &&
          echo "Release IP: ${{ env.RELEASE_IP }}" &&
          echo "Release Name: ${{ env.RELEASE_NAME }}" &&
          echo "Gcloud Action: ${{ env.GCLOUD_ACTION_CONTAINER }}" &&
          echo "Gcloud VM name: ${{ env.GCLOUD_VM_NAME }}"
          echo "Gcloud VM image: ${{ env.GCLOUD_VM_IMAGE }}"
          
      - name: Update bootstrap node with a new container image
        if: env.GCLOUD_ACTION_CONTAINER == 'update'
        run: |
          gcloud compute instances update-container ${{ env.GCLOUD_VM_NAME }} \
            --zone=europe-west6-a \
            --container-image=gcr.io/hoprassociation/hoprd:${{ env.RELEASE_VERSION }} \
            --container-mount-disk name=bs-${{ env.RELEASE_NAME }},mount-path="/app/db"

      - name: Create new bootstrap node with a given IP for a specific release
        if: env.GCLOUD_ACTION_CONTAINER == 'create'
        run: |
          gcloud compute instances create-with-container ${{ env.GCLOUD_VM_NAME }} \
            --zone=europe-west6-a \
            --machine-type=e2-medium \
            --network-interface=address=${{ env.RELEASE_IP }},network-tier=PREMIUM,subnet=default \
            --metadata=google-logging-enabled=true --maintenance-policy=MIGRATE \
            --create-disk name=bs-${{ env.RELEASE_NAME }},size=10GB,type=pd-ssd,mode=rw \
            --container-mount-disk mount-path="/app/db" \
            --tags=hopr-node,web-client,portainer \
            --boot-disk-size=10GB --boot-disk-type=pd-standard \
            --container-env=^,@^DEBUG=hopr\*,@NODE_OPTIONS=--max-old-space-size=4096 \
            --container-image=gcr.io/hoprassociation/hoprd:${{ env.RELEASE_VERSION }} \
            --container-arg="--password" --container-arg="${{ secrets.BS_PASSWORD }}" \
            --container-arg="--env" --container-arg="matic" \
            --container-arg="--init" --container-arg="true" \
            --container-arg="--runAsBootstrap" --container-arg="true" \
            --container-arg="--admin" \
            --container-restart-policy=always

      - name: Wait for container to be updated by konlet
        if: env.GCLOUD_ACTION_CONTAINER == 'update'
        run: sleep 30s

      - name: Wait for container to be created by konlet
        if: env.GCLOUD_ACTION_CONTAINER == 'create'
        run: sleep 2m

      - name: Store disk name in our environment for further usage
        run: echo "GCLOUD_VM_DISK=/mnt/disks/gce-containers-mounts/gce-persistent-disks/bs-${{ env.RELEASE_NAME }}" >> $GITHUB_ENV

      - name: Stop bootstrap node to get the address from the database
        run: |
          gcloud compute ssh --zone=europe-west6-a ${{ env.GCLOUD_VM_NAME }} \
          -- 'export DOCKER_IMAGE=gcr.io/hoprassociation/hoprd:${{ env.RELEASE_VERSION }} && docker stop $(docker ps -q --filter "ancestor=$DOCKER_IMAGE")'

      - name: Get ethereum address from bootstrap docker container and save it
        run: |
          GCLOUD_VM_NAME=${{ env.GCLOUD_VM_NAME }} \
          GCLOUD_VM_DISK=${{ env.GCLOUD_VM_DISK }} \
          BS_PASSWORD=${{ secrets.BS_PASSWORD }} \
          RELEASE_NAME=${{ env.RELEASE_NAME }} \
          bash scripts/cd/address_env.sh >> $GITHUB_ENV

      - name: Verify bootstrap server address from previous step
        run: |
          echo "Bootstrap Server Address: ${{ env.BOOTSTRAP_ADDRESS }}"

      - name: Check bootstrap server balance
        id: bootstrap_balance
        run: |
          echo "::set-output name=bootstrap_balance::$(ethers --rpc ${{ env.RPC_URL }} --account ${{ env.RAW_KEY }} eval 'new ethers.providers.JsonRpcProvider("${{ env.RPC_URL }}").getBalance("${{ env.ADDRESS }}").then(b => formatEther(b))')"
        env:
          RAW_KEY: ${{ secrets.FUNDING_WALLET_PRIVATE_KEY }}
          RPC_URL: ${{ secrets.FUNDING_RPC_MATIC_URL }}
          ADDRESS: ${{ env.BOOTSTRAP_ADDRESS }}

      - name: Verify bootstrap server balance from previous step
        run: |
          echo "Bootstrap Address Balance: ${{ env.BOOTSTRAP_ADDRESS_BALANCE }}" &&
          echo "BOOTSTRAP_ADDRESS_BALANCE=${{ env.BOOTSTRAP_ADDRESS_BALANCE }}" >> $GITHUB_ENV
        env:
          BOOTSTRAP_ADDRESS_BALANCE: ${{ steps.bootstrap_balance.outputs.bootstrap_balance }}

      - name: Fund bootstrap server address if account is empty
        if: env.BOOTSTRAP_ADDRESS_BALANCE == '0.0'
        run: |
          ethers --rpc ${{ env.RPC_URL }} --account ${{ env.RAW_KEY }} send ${{ env.ADDRESS }} 0.01291 --yes
        env:
          RAW_KEY: ${{ secrets.FUNDING_WALLET_PRIVATE_KEY }}
          RPC_URL: ${{ secrets.FUNDING_RPC_MATIC_URL }}
          ADDRESS: ${{ env.BOOTSTRAP_ADDRESS }}

      - name: Wait for ethers transaction to go through
        if: env.BOOTSTRAP_ADDRESS_BALANCE == '0.0'
        run: sleep 1m

      - name: Check bootstrap server balance one more time.
        if: env.BOOTSTRAP_ADDRESS_BALANCE == '0.0'
        run: |
          echo "Balance: $(ethers --rpc ${{ env.RPC_URL }} --account ${{ env.RAW_KEY }} eval 'new ethers.providers.JsonRpcProvider("${{ env.RPC_URL }}").getBalance("${{ env.ADDRESS }}").then(b => formatEther(b))')"
        env:
          RAW_KEY: ${{ secrets.FUNDING_WALLET_PRIVATE_KEY }}
          RPC_URL: ${{ secrets.FUNDING_RPC_MATIC_URL }}
          ADDRESS: ${{ env.BOOTSTRAP_ADDRESS }}
      
      - name: Get HOPR address from bootstrap docker container now that its funded
        run: |
          GCLOUD_VM_NAME=${{ env.GCLOUD_VM_NAME }} \
          GCLOUD_VM_DISK=${{ env.GCLOUD_VM_DISK }} \
          BS_PASSWORD=${{ secrets.BS_PASSWORD }} \
          RELEASE_NAME=${{ env.RELEASE_NAME }} \
          bash scripts/cd/hopr_env.sh >> $GITHUB_ENV

      - name: Restart bootstrap server virtual machine to restart main container
          echo "Bootstrap Server HOPR Address: ${{ env.BOOTSTRAP_HOPR_ADDRESS }}"
          gcloud compute instances reset --zone=europe-west6-a ${{ env.GCLOUD_VM_NAME }}
          echo "Bootstrap multiaddr: /${{ env.RELEASE_IP }}/tcp/9091/p2p/${{ env.BOOTSTRAP_HOPR_ADDRESS }}"
        

